import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_mc
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    compileOnly "curse.maven:mccapes-359836:${mccapes_cf_file_id}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"

    runtimeOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}"
    compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}:api"

    compileOnly "curse.maven:deeperdarker-659011:5698218"
}

task publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = findProperty('curseKey')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('../CHANGELOG_LATEST.md')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addModLoader("NeoForge")
    mainFile.addRequirement("curios-continuation")
    mainFile.addRequirement("caelus")
    mainFile.withAdditionalFile(sourcesJar)

    doLast {

        if (project.hasProperty('cf_page') && mainFile.curseFileId != null) {
            project.ext.curse_link = "${cf_page}/files/${mainFile.curseFileId}"
        }
    }
}

modrinth {
    token = findProperty('modrinthKey') ?: 0
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('../CHANGELOG_LATEST.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    additionalFiles = [sourcesJar]
    gameVersions = "${release_versions}".split(",") as List<String>
    loaders = ["neoforge"]
    dependencies {
        required.project 'curios-continuation'
        required.project 'caelus'
    }
}

tasks.modrinth.doLast {

    if (project.hasProperty('modrinth_page') && tasks.modrinth.newVersion != null) {
        project.ext.modrinth_link = "${modrinth_page}/version/${tasks.modrinth.newVersion.id}"
    }
}
